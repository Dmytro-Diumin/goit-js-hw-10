{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePickerRef = document.querySelector(\"#datetime-picker\");\nconst btnStartRef = document.querySelector(\"[data-start]\");\nconst daysRef = document.querySelector('[data-days]');\nconst hoursRef = document.querySelector('[data-hours]');\nconst minutesRef = document.querySelector('[data-minutes]');\nconst secondsRef = document.querySelector('[data-seconds]');\nlet userSelectedDate;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      if (userSelectedDate < Date.now()) {\n        iziToast.error({\n          message: 'Please choose a date in the future',\n          position: 'topRight',\n        });\n        btnStartRef.disabled = true;\n      } else {\n        btnStartRef.disabled = false;\n      };\n    },\n  };\n\n  flatpickr(datetimePickerRef, options);\n\n  btnStartRef.addEventListener(\"click\", btnStartClick);\n  btnStartRef.disabled = true;\n\n  function btnStartClick() {\n    btnStartRef.disabled = true;\n    datetimePickerRef.disabled = true;\n    const intervalId = setInterval(() => {\n        if (userSelectedDate - new Date() >= 0) {\n            const timerDate = convertMs(userSelectedDate - new Date());\n            daysRef.textContent = addLeadingZero(timerDate.days);\n            hoursRef.textContent = addLeadingZero(timerDate.hours);\n            minutesRef.textContent = addLeadingZero(timerDate.minutes);\n            secondsRef.textContent = addLeadingZero(timerDate.seconds);\n        } else {\n            clearInterval(intervalId);\n            datetimePickerRef.disabled = false;\n        }\n    }, 1000);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }"],"names":["datetimePickerRef","btnStartRef","daysRef","hoursRef","minutesRef","secondsRef","userSelectedDate","options","selectedDates","iziToast","flatpickr","btnStartClick","intervalId","timerDate","convertMs","addLeadingZero","value","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAoB,SAAS,cAAc,kBAAkB,EAC7DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAa,SAAS,cAAc,gBAAgB,EAC1D,IAAIC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,KAAK,OAC1BG,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UACpB,CAAS,EACDR,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACL,EAEES,EAAUV,EAAmBO,CAAO,EAEpCN,EAAY,iBAAiB,QAASU,CAAa,EACnDV,EAAY,SAAW,GAEvB,SAASU,GAAgB,CACvBV,EAAY,SAAW,GACvBD,EAAkB,SAAW,GAC7B,MAAMY,EAAa,YAAY,IAAM,CACjC,GAAIN,EAAmB,IAAI,MAAU,EAAG,CACpC,MAAMO,EAAYC,EAAUR,EAAmB,IAAI,IAAM,EACzDJ,EAAQ,YAAca,EAAeF,EAAU,IAAI,EACnDV,EAAS,YAAcY,EAAeF,EAAU,KAAK,EACrDT,EAAW,YAAcW,EAAeF,EAAU,OAAO,EACzDR,EAAW,YAAcU,EAAeF,EAAU,OAAO,CACrE,MACY,cAAcD,CAAU,EACxBZ,EAAkB,SAAW,EAEpC,EAAE,GAAI,CACX,CAEA,SAASe,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEE,SAASF,EAAUG,EAAI,CAKrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C"}